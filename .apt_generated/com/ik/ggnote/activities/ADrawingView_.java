//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.ik.ggnote.activities;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ScrollView;
import com.ik.ggnote.R.id;
import com.ik.ggnote.R.layout;
import com.ik.ggnote.custom.CDrawingView;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ADrawingView_
    extends ADrawingView
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.activity_drawview);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ADrawingView_.IntentBuilder_ intent(Context context) {
        return new ADrawingView_.IntentBuilder_(context);
    }

    public static ADrawingView_.IntentBuilder_ intent(Fragment supportFragment) {
        return new ADrawingView_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        ibRedo = ((ImageButton) hasViews.findViewById(id.ibRedo));
        svDrawingSettings = ((ScrollView) hasViews.findViewById(id.svDrawingSettings));
        svDrawShapes = ((ScrollView) hasViews.findViewById(id.svDrawShapes));
        ibColour7 = ((ImageButton) hasViews.findViewById(id.ibColour7));
        ibDrawingSettings = ((ImageView) hasViews.findViewById(id.ibDrawingSettings));
        ibThick = ((ImageButton) hasViews.findViewById(id.ibThick));
        ibColour2 = ((ImageButton) hasViews.findViewById(id.ibColour2));
        ibColour17 = ((ImageButton) hasViews.findViewById(id.ibColour17));
        svBrushColour = ((ScrollView) hasViews.findViewById(id.svBrushColour));
        ibColour3 = ((ImageButton) hasViews.findViewById(id.ibColour3));
        ibColour12 = ((ImageButton) hasViews.findViewById(id.ibColour12));
        ibColour5 = ((ImageButton) hasViews.findViewById(id.ibColour5));
        ibColour1 = ((ImageButton) hasViews.findViewById(id.ibColour1));
        ibColour13 = ((ImageButton) hasViews.findViewById(id.ibColour13));
        ibColour8 = ((ImageButton) hasViews.findViewById(id.ibColour8));
        ivShapesDone = ((ImageView) hasViews.findViewById(id.ivShapesDone));
        ibShapesCircle = ((ImageButton) hasViews.findViewById(id.ibShapesCircle));
        ibEraser = ((ImageButton) hasViews.findViewById(id.ibEraser));
        ibDrawingSettingsDone = ((ImageView) hasViews.findViewById(id.ibDrawingSettingsDone));
        ibMedium = ((ImageButton) hasViews.findViewById(id.ibMedium));
        ibColour15 = ((ImageButton) hasViews.findViewById(id.ibColour15));
        ibColour6 = ((ImageButton) hasViews.findViewById(id.ibColour6));
        ibColour9 = ((ImageButton) hasViews.findViewById(id.ibColour9));
        ibShapesFreeDrawing = ((ImageButton) hasViews.findViewById(id.ibShapesFreeDrawing));
        cDrawingView = ((CDrawingView) hasViews.findViewById(id.cDrawingView));
        ibShapesTriangle = ((ImageButton) hasViews.findViewById(id.ibShapesTriangle));
        ibColour16 = ((ImageButton) hasViews.findViewById(id.ibColour16));
        ibShapes = ((ImageView) hasViews.findViewById(id.ibShapes));
        ivColorAndShape = ((ImageView) hasViews.findViewById(id.ivColorAndShape));
        ibColour4 = ((ImageButton) hasViews.findViewById(id.ibColour4));
        ibColour14 = ((ImageButton) hasViews.findViewById(id.ibColour14));
        ibBrushColours = ((ImageView) hasViews.findViewById(id.ibBrushColours));
        ibColour10 = ((ImageButton) hasViews.findViewById(id.ibColour10));
        ivBrushColoursDone = ((ImageView) hasViews.findViewById(id.ivBrushColoursDone));
        ibThin = ((ImageButton) hasViews.findViewById(id.ibThin));
        ibColorPicker = ((ImageButton) hasViews.findViewById(id.ibColorPicker));
        ibColour11 = ((ImageButton) hasViews.findViewById(id.ibColour11));
        ibUndo = ((ImageButton) hasViews.findViewById(id.ibUndo));
        ibClearAll = ((ImageButton) hasViews.findViewById(id.ibClearAll));
        ibShapesRectangle = ((ImageButton) hasViews.findViewById(id.ibShapesRectangle));
        ibShapesLine = ((ImageButton) hasViews.findViewById(id.ibShapesLine));
        {
            View view = hasViews.findViewById(id.ibClearAll);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibClearAll();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibShapesTriangle);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibShapesTriangle();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibMedium);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibMedium();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibThick);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibThick();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibBrushColours);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibBrushColours();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibShapes);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibShapes();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibEraser);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibEraser();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibThin);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibThin();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibUndo);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibUndo();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibShapesLine);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibShapesLine();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibShapesFreeDrawing);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibShapesFreeDrawing();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibShapesRectangle);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibShapesRectangle();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibColorPicker);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibColorPicker();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibDrawingSettings);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibDrawingSettings();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibShapesCircle);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibShapesCircle();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.ibRedo);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ADrawingView_.this.ibRedo();
                    }

                }
                );
            }
        }
        afterViews();
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, ADrawingView_.class);
        }

        public IntentBuilder_(Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, ADrawingView_.class);
        }

        public Intent get() {
            return intent_;
        }

        public ADrawingView_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (context_ instanceof Activity) {
                    ((Activity) context_).startActivityForResult(intent_, requestCode);
                } else {
                    context_.startActivity(intent_);
                }
            }
        }

    }

}
